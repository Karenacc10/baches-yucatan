generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Report {
  id                  String       @id @default(uuid())
  latitude            Float
  longitude           Float
  street              String?
  neighborhood        String?
  city                String?
  state               String?
  postalCode          String?
  description         String?
  date                DateTime
  reportedByVehicleId String?
  reportedByWorkerId  String?
  status              ReportStatus @default(reported)
  severity            Severity
  comments            String?
  images              String[]
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  reportedByVehicle   Vehicle?     @relation("VehicleReports", fields: [reportedByVehicleId], references: [id])
  reportedByWorker    Worker?      @relation(fields: [reportedByWorkerId], references: [id])
}

model Vehicle {
  id                 String        @id @default(uuid())
  licensePlate       String        @unique
  model              String?
  year               Int?
  color              String?
  corporation        String?
  assignedWorkerId   String?
  assignerWorkersIds String[]
  status             VehicleStatus @default(active)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  assignments        Assignment[]
  reports            Report[]      @relation("VehicleReports")
  assignedWorker     Worker?       @relation(fields: [assignedWorkerId], references: [id])
}

model Worker {
  id              String       @id @default(uuid())
  role            Role
  email           String       @unique
  passwordHash    String
  name            String
  secondName      String?
  lastname        String
  secondLastname  String
  badgeNumber     String?
  rank            String?
  status          WorkerStatus @default(active)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  photoUrl        String?
  yearsOfService  Int?
  specialization  String[]
  languagesSpoken String[]
  certifications  String[]
  awards          String[]
  notes           String?
  assignments     Assignment[]
  reports         Report[]
  vehicleAssigned Vehicle[]
}

model Assignment {
  id             String         @id @default(uuid())
  teamId         Int?
  workerId       String
  vehicleId      String?
  assignedAt     DateTime?      @default(now())
  completedAt    DateTime?
  progressStatus ProgressStatus @default(not_started)
  priority       Priority       @default(medium)
  notes          String?
  vehicle        Vehicle?       @relation(fields: [vehicleId], references: [id])
  worker         Worker         @relation(fields: [workerId], references: [id])
}

enum Role {
  admin
  supervisor
  worker
}

enum ReportStatus {
  reported
  in_progress
  resolved
}

enum Severity {
  low
  medium
  high
}

enum VehicleStatus {
  active
  inactive
  maintenance
}

enum WorkerStatus {
  active
  inactive
  suspended
}

enum ProgressStatus {
  not_started
  in_progress
  completed
  on_hold
}

enum Priority {
  low
  medium
  high
}
